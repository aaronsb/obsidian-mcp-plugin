name: Build and Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'

env:
  PLUGIN_NAME: obsidian-mcp-plugin

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for version bumping

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build plugin
        run: npm run build

      - name: Get version from manifest
        id: version
        run: |
          echo "version=$(jq -r '.version' manifest.json)" >> $GITHUB_OUTPUT
          echo "name=$(jq -r '.name' manifest.json)" >> $GITHUB_OUTPUT

      - name: Check if version tag exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: steps.check_tag.outputs.exists == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: v${{ steps.version.outputs.version }}
          body: |
            ## ${{ steps.version.outputs.name }} v${{ steps.version.outputs.version }}
            
            Auto-generated release from main branch.
            
            ### Installation via BRAT
            1. Install the BRAT plugin if you haven't already
            2. Command palette â†’ "BRAT: Add a beta plugin for testing"
            3. Enter: `aaronsb/obsidian-mcp-plugin`
            4. Enable the plugin in Community Plugins
            
            ### Changes
            See commit history for detailed changes in this release.
          draft: false
          prerelease: true

      - name: Upload main.js
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./main.js
          asset_name: main.js
          asset_content_type: text/javascript

      - name: Upload manifest.json
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./manifest.json
          asset_name: manifest.json
          asset_content_type: application/json

      - name: Upload styles.css
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./styles.css
          asset_name: styles.css
          asset_content_type: text/css